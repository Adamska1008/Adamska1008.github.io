<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客</title>
  
  
  <link href="https://adamska1008.github.io/atom.xml" rel="self"/>
  
  <link href="https://adamska1008.github.io/"/>
  <updated>2021-08-14T15:45:03.400Z</updated>
  <id>https://adamska1008.github.io/</id>
  
  <author>
    <name>Adamska</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dp求解最短编辑距离</title>
    <link href="https://adamska1008.github.io/2021/08/14/dp%E6%B1%82%E8%A7%A3%E6%9C%80%E7%9F%AD%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
    <id>https://adamska1008.github.io/2021/08/14/dp%E6%B1%82%E8%A7%A3%E6%9C%80%E7%9F%AD%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/</id>
    <published>2021-08-14T15:11:44.000Z</published>
    <updated>2021-08-14T15:45:03.400Z</updated>
    
    <content type="html"><![CDATA[<p>一道dp的经典例题，建议学习</p><h3 id="最短编辑距离"><a href="#最短编辑距离" class="headerlink" title="最短编辑距离"></a>最短编辑距离</h3><p>给定两个字符串 $A$ 和 $B$，现在要将 $A$ 经过若干操作变为 $B$，可进行的操作有：</p><ol><li>删除–将字符串 $A$ 中的某个字符删除。</li><li>插入–在字符串 $A$ 的某个位置插入某个字符。</li><li>替换–将字符串 $A$ 中的某个字符替换为另一个字符。</li></ol><p>现在请你求出，将 $A$ 变为 $B$ 至少需要进行多少次操作。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 $n$，表示字符串 $A$ 的长度。</p><p>第二行包含一个长度为 $n$ 的字符串 $A$。</p><p>第三行包含整数 $m$，表示字符串 $B$ 的长度。</p><p>第四行包含一个长度为 $m$ 的字符串 $B$。</p><p>字符串中均只包含大写字母。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最少操作次数。</p><p>数据范围<br>$1≤n,m≤1000$<br>输入样例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10 </span><br><span class="line">AGTCTGACGC</span><br><span class="line">11 </span><br><span class="line">AGTAAGTAGGC</span><br></pre></td></tr></table></figure></p><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>状态定义：$f[i, j]$ 为将 $A$ 的前 $i$ 个字符串转化成 $B$ 的前 $j$ 个字符串所需的最少操作数。  </p><p>我们考虑对 $f[i]$ 进行的所有可能的操作。</p><ol><li>删除操作。我们可以先做 $f[i - 1, j]$ 对应的操作， 最后把多余的 $a[i]$ 删掉即可。此时 $f[i, j] = f[i - 1, j] + 1$ 。</li><li>增加操作。我们可以先做 $f[i, j - 1]$ 对应的操作，最后再在串后面加上 $b[j]$ 即可。此时 $f[i, j] = f[i, j - 1] + 1$ 。</li><li>修改操作。我们可以先做 $f[i - 1, j - 1]$ 对应的操作。如果 $a[i] == b[j]$， 则直接结束。否则，将 $a[i]$ 改成 $b[j]$ 。此时 $f[i, j] = f[i - 1,, j - 1] + 1 \ or \ 0$。</li></ol><p>由于是求最小值，故上述三种方案中求最小值。</p><p>综上，得状态转移方程：</p><script type="math/tex; mode=display">f[i, j] = min(f[i - 1, j] + 1, f[i, j - 1] + 1, f[i - 1, j - 1] + 1 \ or \ 0)</script><p>不难得到代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[N];</span><br><span class="line"><span class="keyword">char</span> b[N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%s%d%s&quot;</span>, &amp;n, a + <span class="number">1</span>, &amp;m, b + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        f[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">        f[<span class="number">0</span>][i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j - <span class="number">1</span>] + <span class="number">1</span>, f[i - <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + (a[i] == b[j] ? <span class="number">0</span> : <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一道dp的经典例题，建议学习&lt;/p&gt;
&lt;h3 id=&quot;最短编辑距离&quot;&gt;&lt;a href=&quot;#最短编辑距离&quot; class=&quot;headerlink&quot; title=&quot;最短编辑距离&quot;&gt;&lt;/a&gt;最短编辑距离&lt;/h3&gt;&lt;p&gt;给定两个字符串 $A$ 和 $B$，现在要将 $A$ 经过若干操</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://adamska1008.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="题解" scheme="https://adamska1008.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="dp" scheme="https://adamska1008.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>贪心+二分优化求解最长上升子序列</title>
    <link href="https://adamska1008.github.io/2021/08/14/%E8%B4%AA%E5%BF%83+%E4%BA%8C%E5%88%86%E4%BC%98%E5%8C%96%E6%B1%82%E8%A7%A3%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://adamska1008.github.io/2021/08/14/%E8%B4%AA%E5%BF%83+%E4%BA%8C%E5%88%86%E4%BC%98%E5%8C%96%E6%B1%82%E8%A7%A3%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2021-08-14T08:39:22.000Z</published>
    <updated>2021-08-14T15:38:40.240Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道使用dp可以在$O(n^2)$时间内求出最长上升子序列，而贪心+二分可以将时间压到$O(nlogn)$</p><h3 id="最长上升子序列（数据加强）"><a href="#最长上升子序列（数据加强）" class="headerlink" title="最长上升子序列（数据加强）"></a>最长上升子序列（数据加强）</h3><p>给定一个长度为 $N$ 的数列，求数值严格单调递增的子序列的长度最长是多少。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 $N$。<br>第二行包含 $N$ 个整数，表示完整序列。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大长度。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1≤N≤100000，$<br>$−10^9≤数列中的数≤10^9 $</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">3 1 2 1 8 5 6</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>我们维护一个 $st[N]$ 数组，$st[i]$ 表示所有长度为 $i$ 的上升序列中，末尾最小的那个序列的最后一位数字。</p><p>看起来有点绕，举个例子，在数据<code>3 1 2 1 8 5 6</code>中，长度为 $3$ 的上升序列有<code>3 5 6</code> <code>1 2 8</code> <code>1 2 5</code> <code>1 2 6</code> <code>1 5 6</code> <code>2 5 6</code>，这些序列中，末尾数字分别为<code>6</code> <code>8</code> <code>5</code> <code>6</code> <code>6</code> <code>6</code>，最小的数是 $5$，则 $st[3] = 5$。</p><p>同时，可以证明这个数组是单调递增的。使用反证法，假设 $a[i + 1] \le a[i]$，那么在这个长度为 $i + 1$ 的上升序列中，其倒数第二个数严格小于 $a[i]$ 。由于以倒数第二个数结尾的序列也是长度为 $i$ 的序列，所以 $a[i]$ 不是长度为 $i$ 的序列中结尾最小的序列的结尾，构成矛盾。</p><p>举个例子，假如结尾最小的序列是 <code>a b 4</code> <code>x y z 3</code>，则有 $z &lt; 3 \le 4$ ，则 $st[3] = z$ 而非 $4$。</p><p>这个数组有什么用呢。只要我们得到了这个数组，就相当于得到了答案，因为我们只要看数组边界到哪就行。在上例中 $a[4] = 6$，而 $a[5]$ 没有定义，所以答案是 $4$。</p><p>我们通过遍历一遍原数组就可以维护这个数组。对于遍历到的 $a[i]$ ，由于 $a[i]$ 在 前 $i - 1$ 个元素后面，所以 $a[i]$ 要么可以跟在某一个序列的后面，要么自身形成一个序列（比前 $i - 1$ 个数都小时）。</p><p>如果 $a[i]$ 比前 $i - 1$ 个数都小，那么显然 $st[1] = a[i]$；如果 $a[i]$ 比前 $i - 1$ 个数都大，那么，假设前 $i - 1$ 个数中，最长上升子序列的长度为 $l$，此时则有 $a[l + 1] = a[i] $。</p><p>否则，必定能找到一个 $k \in [2, \ l]$ ，使得 $ st[k - 1] &lt; a[i] \le st[k]  $。这时，显然就有 $st[k] = a[i]$ 。由于证明过 $st$ 数组严格递增，我们可以用二分查找这个 $k$。实际写题目的时候，上述三个情况是可以合并的。</p><p>遍历原数组，且对于遍历到的每个元素进行一次二分查找，耗时 $O(nlogn)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> st[N]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(st));</span><br><span class="line">    st[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//int l = lower_bound(st + 1, st + n + 1, a[i]) - st; // if use STL</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (st[mid] &gt;= a[i])</span><br><span class="line">                r = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="comment">// if not use STL</span></span><br><span class="line">        st[l] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (st[ans + <span class="number">1</span>] != INF)</span><br><span class="line">        ans++;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们知道使用dp可以在$O(n^2)$时间内求出最长上升子序列，而贪心+二分可以将时间压到$O(nlogn)$&lt;/p&gt;
&lt;h3 id=&quot;最长上升子序列（数据加强）&quot;&gt;&lt;a href=&quot;#最长上升子序列（数据加强）&quot; class=&quot;headerlink&quot; title=&quot;最长上</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://adamska1008.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="题解" scheme="https://adamska1008.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="贪心" scheme="https://adamska1008.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="二分" scheme="https://adamska1008.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>在C++中实现for range</title>
    <link href="https://adamska1008.github.io/2021/08/14/%E5%9C%A8C-%E4%B8%AD%E5%AE%9E%E7%8E%B0for-range/"/>
    <id>https://adamska1008.github.io/2021/08/14/%E5%9C%A8C-%E4%B8%AD%E5%AE%9E%E7%8E%B0for-range/</id>
    <published>2021-08-14T05:50:15.000Z</published>
    <updated>2021-08-14T14:18:47.572Z</updated>
    
    <content type="html"><![CDATA[<p>如代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。</span></span><br><span class="line"><span class="comment">// 对于iterator，实现如下方法：operator!=(), operator*(), operator++()</span></span><br><span class="line"><span class="comment">// 对于容器，实现如下方法：begin(), end()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Iter</span><span class="params">(<span class="keyword">int</span> a)</span> : _value(a) &#123;</span>&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Iter i) &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="built_in">GetValue</span>() != i.<span class="built_in">GetValue</span>(); &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="built_in">GetValue</span>(); &#125;</span><br><span class="line">    <span class="keyword">const</span> Iter &amp;<span class="keyword">operator</span>++() &#123; <span class="keyword">return</span> ++_value, *<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">range</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">range</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> : _begin(a), _end(b) &#123;</span>&#125;</span><br><span class="line">    <span class="function">Iter <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Iter</span>(_begin); &#125;</span><br><span class="line">    <span class="function">Iter <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Iter</span>(_end); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _begin;</span><br><span class="line">    <span class="keyword">int</span> _end;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>效果<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#output</span></span><br><span class="line">0 1 2 3 4 5 6 7 8 9 </span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如代码&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    <category term="杂项" scheme="https://adamska1008.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="C++" scheme="https://adamska1008.github.io/tags/C/"/>
    
    <category term="造轮子" scheme="https://adamska1008.github.io/tags/%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>日期问题</title>
    <link href="https://adamska1008.github.io/2021/08/14/%E6%97%A5%E6%9C%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://adamska1008.github.io/2021/08/14/%E6%97%A5%E6%9C%9F%E9%97%AE%E9%A2%98/</id>
    <published>2021-08-13T16:06:57.000Z</published>
    <updated>2021-08-14T09:01:27.982Z</updated>
    
    <content type="html"><![CDATA[<p>此文提供解决日期问题的模板。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>日期问题是一类难度不大，但极为烦人的模拟题，一般要求如下：</p><blockquote><p>已知xxxx年yy月zz日为星期k，则aaaa年bb月cc日为星期几？</p></blockquote><p>解决这类题，一般使用如下模板<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> months[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_leap</span><span class="params">(<span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_days</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (month == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> months[<span class="number">2</span>] + <span class="built_in">is_leap</span>(year);</span><br><span class="line">    <span class="keyword">return</span> months[month];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> year = begin; year &lt;= end; year++)</span><br><span class="line">    &#123;</span><br><span class="line">        \*</span><br><span class="line">            code</span><br><span class="line">        *\</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> month = <span class="number">1</span>; month &lt;= <span class="number">12</span>; month++)</span><br><span class="line">        &#123;</span><br><span class="line">            \*</span><br><span class="line">                code</span><br><span class="line">            *\</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> day = <span class="number">1</span>; day &lt;= <span class="built_in">get_days</span>(year, month); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                \*</span><br><span class="line">                    code</span><br><span class="line">                *\</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们以CSP上的一道题为例。</p><h3 id="201503-3-节日"><a href="#201503-3-节日" class="headerlink" title="201503-3 节日"></a>201503-3 节日</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>有一类节日的日期并不是固定的，而是以“a月的第b个星期c”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。</p><p>现在，给你 $a，b，c$ 和 $y1, y2(1850 ≤ y1, y2 ≤ 2050)$ ，希望你输出从公元 $y1$ 年到公元 $y2$ 年间的每年的 $a$ 月的第 $b$ 个星期 $c$ 的日期。</p><p>提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。</p><p>为了方便你推算，已知1850年1月1日是星期二。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含恰好一行，有五个整数 $a, b, c, y1, y2$ 。其中 $c=1, 2, ……, 6, 7$ 分别表示星期一、二、……、六、日。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于 $y1$ 和 $y2$ 之间的每一个年份，包括 $y1$ 和 $y2$，按照年份从小到大的顺序输出一行。</p><p>如果该年的 $a$ 月第 $b$ 个星期 $c$ 确实存在，则以 <code>yyyy/mm/dd</code> 的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠 $/$ 分隔，位数不足时前补零。</p><p>如果该年的 $a$ 月第 $b$ 个星期 $c$ 并不存在，则输出 <code>none</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1≤a≤12，$<br>$1≤b≤5，$<br>$1≤c≤7，$<br>$1850≤y1,y2≤2050$</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 2 7 2014 2015</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2014/05/11</span><br><span class="line">2015/05/10</span><br></pre></td></tr></table></figure><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> months[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_leap</span><span class="params">(<span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_days</span><span class="params">(<span class="keyword">int</span> month, <span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (month == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> months[<span class="number">2</span>] + <span class="built_in">is_leap</span>(year);</span><br><span class="line">    <span class="keyword">return</span> months[month];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, y1, y2;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; y1 &gt;&gt; y2;</span><br><span class="line">    <span class="keyword">int</span> days = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> year = <span class="number">1850</span>; year &lt;= y2; year++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> month = <span class="number">1</span>; month &lt;= <span class="number">12</span>; month++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (year &gt;= y1 &amp;&amp; month == a)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> w = (<span class="number">1</span> + days) % <span class="number">7</span>, cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="built_in">get_days</span>(month, year); d++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (w == c - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cnt++;</span><br><span class="line">                        <span class="keyword">if</span> (cnt == b)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;%04d/%02d/%02d\n&quot;</span>, year, month, d);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    w = (w + <span class="number">1</span>) % <span class="number">7</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cnt &lt; b)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;none&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            days += <span class="built_in">get_days</span>(month, year);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此文提供解决日期问题的模板。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;日期问题是一类难度不大，但极为烦人的模拟题，一般要求如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://adamska1008.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="模板" scheme="https://adamska1008.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="模拟" scheme="https://adamska1008.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>静态链接与动态链接（中）</title>
    <link href="https://adamska1008.github.io/2021/08/11/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <id>https://adamska1008.github.io/2021/08/11/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%EF%BC%88%E4%B8%AD%EF%BC%89/</id>
    <published>2021-08-11T15:59:53.000Z</published>
    <updated>2021-08-13T16:05:52.509Z</updated>
    
    <content type="html"><![CDATA[<p>本系列仅简单介绍链接的概念与基本使用，不包括链接的实现机制。 </p><h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>假设一个操作系统上运行着100个程序，每个程序都需要使用printf。如果使用静态链接库，则printf的代码就会被复制100次，这显然造成了资源浪费。</p><p>共享库(shared library)解决了这一问题。它可以加载到任意内存地址，并和一个程序链接起来，这就是动态链接。在Linux中为.so文件，在Windows中为.dll文件。所有引用共享库的程序共享一个so文件中的代码和数据。</p><p>依旧使用上篇中提到的add.c和mult.c作为案例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fpic -o libvec.so add.c mult.c</span><br><span class="line"><span class="comment">#调用-fpic保证位置无关，是生成共享库的参数</span></span><br><span class="line">gcc -o prog main.c ./libvec.so</span><br></pre></td></tr></table></figure></p><h3 id="C语言从应用程序中加载和链接共享库"><a href="#C语言从应用程序中加载和链接共享库" class="headerlink" title="C语言从应用程序中加载和链接共享库"></a>C语言从应用程序中加载和链接共享库</h3><p>要想链接共享库，既可以编译时加入编译参数，也可以在程序执行的过程中动态地加载共享库。</p><p>Linux系统为动态链接器提供了一个简单的接口，在<code>&lt;dlfcn.h&gt;</code>库下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">dlopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">dlsym</span><span class="params">(<span class="keyword">void</span> *handle, <span class="keyword">char</span> *symbol)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dlclose</span><span class="params">(<span class="keyword">void</span> *handle)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2</span>] = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *handle;</span><br><span class="line">    <span class="built_in"><span class="keyword">void</span></span> (*add)(<span class="keyword">int</span>*, <span class="keyword">int</span>*, <span class="keyword">int</span>*, <span class="keyword">int</span>);</span><br><span class="line">    <span class="comment">//为演示方便，忽视可能的error。</span></span><br><span class="line">    handle = <span class="built_in">dlopen</span>(<span class="string">&quot;./libvec.so&quot;</span>, RTLD_LAZY);</span><br><span class="line">    add = <span class="built_in">dlsym</span>(handle, <span class="string">&quot;add&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">add</span>(a, b, c, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c = [%d %d]\n&quot;</span>, z[<span class="number">0</span>], z[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dlclose</span>(handle);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -rdynamic -o prog main.c -ldl</span><br><span class="line"><span class="comment"># -rdynamic 参数用于动态链接器解析main.c中的符号</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">c = [4 6]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本系列仅简单介绍链接的概念与基本使用，不包括链接的实现机制。 &lt;/p&gt;
&lt;h3 id=&quot;动态链接&quot;&gt;&lt;a href=&quot;#动态链接&quot; class=&quot;headerlink&quot; title=&quot;动态链接&quot;&gt;&lt;/a&gt;动态链接&lt;/h3&gt;&lt;p&gt;假设一个操作系统上运行着100个程序，每个程序</summary>
      
    
    
    
    <category term="操作系统" scheme="https://adamska1008.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="链接" scheme="https://adamska1008.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%93%BE%E6%8E%A5/"/>
    
    
    <category term="Linux" scheme="https://adamska1008.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>静态链接与动态链接（上）</title>
    <link href="https://adamska1008.github.io/2021/08/11/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://adamska1008.github.io/2021/08/11/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2021-08-11T15:58:13.000Z</published>
    <updated>2021-08-13T16:06:07.552Z</updated>
    
    <content type="html"><![CDATA[<p>本系列仅简单介绍链接的概念与基本使用，不包括链接的实现机制。</p><h3 id="何为链接"><a href="#何为链接" class="headerlink" title="何为链接"></a>何为链接</h3><p>链接是多文件编程的基础。链接器以可重定位目标文件(.o文件)与命令行参数作为输入，输出可执行目标文件。</p><p>符号：在可重定位目标文件中，一个符号对应了一个函数、全局变量或全局静态变量。局部变量没有符号对应，因为局部变量在栈上完成内存管理。</p><p>链接器主要完成两个任务：</p><ul><li>符号解析。可重定位目标文件中定义或引用了符号。链接器需要为不同文件中的引用寻找定义，并将其关联起来。</li><li>重定位。编译器和汇编器生成从地址0开始的代码和数据节(section)。在链接时，需要为符号重新分配合适的内存地址。</li></ul><p>一个链接的案例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//func.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c main.c func.c</span><br><span class="line">gcc -o prog main.o fun.o</span><br></pre></td></tr></table></figure></p><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>当使用链接时，我们难免遇到一种情况：我们只需要引用.o文件中的一个函数，却必须将整个文件链接进来。</p><p>假设一个math.o，定义了下列函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    code</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    code</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sin</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    code</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cos</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    code</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tan</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    code</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们只需要使用max函数，却必须一次性复制五个函数到执行文件中，这就造成了内存的浪费。</p><p>一个可行的解决办法是，一个.o文件只定义一个函数。如printf.o只定义printf，scanf.o只定义scanf。但这又会带来问题：为每一个函数添加链接是很繁琐的。一个程序可能会调用数十个函数，链接几十个函数既麻烦，也不好记忆。</p><p>因此，我们需要一种可以被链接器链接的文件。把所有目标文件存放在一个文件中。当需要引用这个函数时，只复制一个函数对应的一个目标文件，而不会复制其他函数。</p><p>这种文件就是静态库(static library)，在Windows中为.lib文件(library)，在Linux中为.a文件(archive)。</p><h3 id="构建静态链接库"><a href="#构建静态链接库" class="headerlink" title="构建静态链接库"></a>构建静态链接库</h3><p>考虑两个文件add.c，mult.c：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *c, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        c[i] = a[i] + b[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mult.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *c, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        c[i] = a[i] * b[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>首先汇编为.o文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c add.c mult.c</span><br></pre></td></tr></table></figure><br>然后使用AR工具创建静态链接库,得到libvec.a<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar rcs libvec.a add.o mult.o</span><br></pre></td></tr></table></figure><br>在一个文件中调用add或mult函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *c, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//为调用add，我们需要声明add函数，这样才能在编译时为函数寻找定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">2</span>] = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">add</span>(a, b, c, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c = [%d %d]\n&quot;</span>, z[<span class="number">0</span>], z[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编译时，链接静态库函数，使用-L<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -c main.c</span><br><span class="line">gcc -static -o prog main.o -L -lvec</span><br><span class="line"><span class="comment">#-L -lvec等价于./libvec.a，-lvec为缩写 </span></span><br></pre></td></tr></table></figure></p><h4 id="include头文件"><a href="#include头文件" class="headerlink" title="include头文件"></a>include头文件</h4><p>注意，当我们调用add时，我们首先必须声明add函数。这意味着，我们需要为每一个静态库中的函数声明原型。这很繁琐，更重要的是，我们有时未必清楚函数原型的声明是什么。</p><p>所以，静态库会提供.h头文件。我们只需要#include这个头文件，就完成了函数原型的声明。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *c, <span class="keyword">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mult.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> *c, <span class="keyword">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure><br>接下来，我们修改原本的代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;add.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">2</span>] = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">add</span>(a, b, c, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c = [%d %d]\n&quot;</span>, z[<span class="number">0</span>], z[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -static -o prog main.o -L -lvec</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">c = [4 6]</span><br></pre></td></tr></table></figure><br>为什么当我们<code>#include &lt;stdio.h&gt;</code>后，编译时不需要添加静态库呢？因为标准库会隐式地进行链接。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本系列仅简单介绍链接的概念与基本使用，不包括链接的实现机制。&lt;/p&gt;
&lt;h3 id=&quot;何为链接&quot;&gt;&lt;a href=&quot;#何为链接&quot; class=&quot;headerlink&quot; title=&quot;何为链接&quot;&gt;&lt;/a&gt;何为链接&lt;/h3&gt;&lt;p&gt;链接是多文件编程的基础。链接器以可重定位目标文件</summary>
      
    
    
    
    <category term="操作系统" scheme="https://adamska1008.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="链接" scheme="https://adamska1008.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%93%BE%E6%8E%A5/"/>
    
    
    <category term="Linux" scheme="https://adamska1008.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
